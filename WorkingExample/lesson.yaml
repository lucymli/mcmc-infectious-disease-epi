- Class: meta
  Course: mcmc-infectious-disease-epi
  Lesson: WorkingExample
  Author: Lucy M. Li
  Type: Standard
  Organization: Harvard T.H. Chan School of Public Health
  Version: 2.4.3


- Class: cmd_question
  Output: "Let's have a look at a data set collected during an outbreak of 
    influenza in a boarding school in England at the beginning of 1978.\nType plot_data() in the command line."
  CorrectAnswer: plot_data()
  AnswerTests: omnitest(correctExpr='plot_data()')
  Hint: Copy and paste the expression from the question into the command line

- Class: text
  Output: >
    The basic reproductive number (R0) cannot be measured directly from this time series data. We need to fit a transmission 
    model to this data set to figure out what the R0 is. This involves estimating the values of parameters in an SIR model 
    i.e. transmission rate beta, and recovery rate gamma. We can explore the parameter space using the 
    MCMC algorithm described in the class.
    Press Enter to continue.

- Class: cmd_question
  Output: "Let's have a look at an MCMC algorithm.\nType open_mcmc_file() in the command line"
  CorrectAnswer: open_mcmc_file()
  AnswerTests: omnitest(correctExpr='open_mcmc_file()')
  Hint: Copy and paste the expression from the question into the command line

- Class: mult_question
  Output: >
    In line 24, the algorithm decides whether to accept newly proposed parameter values based on the ratio 
    of posterior probabilities. What would be the value of `accepted' if the posterior probability of 
    the proposed parameter values is greater than that of current parameter values? (Type 1 or 2)
  AnswerChoices: TRUE;FALSE
  CorrectAnswer: TRUE
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: According to the rules of MCMC, the Markov chain always moves to parameter values that have higher posterior probability than that of the current parameter values.
  
- Class: mult_question
  Output: >
    What is the purpose of creating the parameter_log object in line 6?
  AnswerChoices: To track parameter values sampled using MCMC.;To calculate the likelihood of the initial parameter values.; To propose new parameter values.;
  CorrectAnswer: To track parameter values sampled using MCMC.
  AnswerTests: omnitest(correctVal="To track parameter values sampled using MCMC.")
  Hint: A record of where the Markov chain has been in parameter space.
  
- Class: exact_question
  Output: >
    Identify the line of code used to propose new values of beta. 
    Enter the number in the command line.
    You can always skip a question by typing skip().
  CorrectAnswer: 18
  AnswerTests: omnitest(correctVal=18)
  Hint: Look for lines containing the draws from the normal distribution using function rnorm()

- Class: script
  Output: >
   Let's try completing the likelihood function, which computes the probability of observing 
   the time series data given a particular set of parameter values. It does this by numerically 
   solving the differential equations of an SIR model to determine the expected time series 
   for a given set of parameters.
   I just opened an R script containing 
   the partially completed likelihood function. Follow the instructions in the script 
   comments.
   When you are ready to submit, save the script and then type submit().
   If you want to start over, type reset().
   You can always skip a question by typing skip().
  AnswerTests: test_likelihood()
  Hint: Follow the directions in the script. You might need the dpois() and sum() functions.
  Script: likelihood.R

- Class: script
  Output: >
   Besides the likelihood, we also need to calculate the prior density of the parameters.
   I just opened an R script containing the function named flu_priors() that calculates 
   the prior probability of parameters. The overall prior probability is equal to 
   log(prior probability of beta) + log(prior probability of gamma). Complete the
   'return()' line so that the function returns the overall prior probability.
   When you are ready to submit, save the script and then type submit().
   If you want to start over, type reset().
   You can always skip a question by typing skip().
  AnswerTests: test_prior()
  Hint: Follow the directions in the script. Remember to add not multiple log-transformed probabilities.
  Script: prior.R
  
- Class: text
  Output: >
    Now that we have our data, likelihood function, and prior function, we can run the MCMC algorithm.
    In the interest of time (and in case something invariably goes wrong), 
    we are not actually going to run the algorithm in class.
    Just for your reference, you can see full script used to analyze this data set on my Github at github.com/lucymli/mcmc-infectious-disease-epi/blob/master/WorkingExample/create-data.R


- Class: cmd_question
  Output: "So let's look at some results I prepared earlier.\nType head(mcmc_output) in the command line to have a look at the output of the MCMC algorithm."
  CorrectAnswer: head(mcmc_output)
  AnswerTests: omnitest(correctExpr='head(mcmc_output)')
  Hint: Copy and paste the expression from the question into the command line

- Class: cmd_question
  Output: "As you can see, the last two columns contain the parameter values sampled from the joint posterior distribution using MCMC. The first step in analyzing MCMC results is to determine if the algorithm has converged, which means the algorithm  has found the stationary distribution of interest. We can check this visually. Type \nggplot(mcmc_output, aes(x=iter, y=beta)) + geom_line()\nin the command line."
  CorrectAnswer: ggplot(mcmc_output, aes(x=iter, y=beta)) + geom_line()
  AnswerTests: omnitest(correctExpr='ggplot(mcmc_output, aes(x=iter, y=beta)) + geom_line()')
  Hint: Copy and paste the expression from the question into the command line

- Class: cmd_question
  Output: >
    Now do the same for the gamma parameter.
  CorrectAnswer: ggplot(mcmc_output, aes(x=iter, y=gamma)) + geom_line()
  AnswerTests: omnitest(correctExpr='ggplot(mcmc_output, aes(x=iter, y=gamma)) + geom_line()')
  Hint: Copy and paste the expression from the question into the command line
  
- Class: cmd_question
  Output: "As you can see, the parameter samples in the initial ('burn-in') period are not distributed according to the posterior distribution, and are affected by the initial conditions. To only analyze samples that were drawn from the posterior distribution, we need to get rid of the samples from the start. \nType mcmc_output_noburnin <- slice(mcmc_output, seq(-1, -500)) in the command line."
  CorrectAnswer: mcmc_output_noburnin <- slice(mcmc_output, seq(-1, -500))
  AnswerTests: omnitest(correctExpr='mcmc_output_noburnin <- slice(mcmc_output, seq(-1, -500))')
  Hint: Copy and paste the expression from the question into the command line

- Class: cmd_question
  Output: "Now let's look at the marginal posterior distributions of parameters. \nType ggplot(mcmc_output_noburnin, aes(x=beta)) + geom_histogram(aes(y=..density..)) + geom_density(aes(y=..density..)) in the command line."
  CorrectAnswer: ggplot(mcmc_output_noburnin, aes(x=beta)) + geom_histogram(aes(y=..density..)) + geom_density(aes(y=..density..))
  AnswerTests: omnitest(correctExpr='ggplot(mcmc_output_noburnin, aes(x=beta)) + geom_histogram(aes(y=..density..)) + geom_density(aes(y=..density..))')
  Hint: Copy and paste the expression from the question into the command line

- Class: cmd_question
  Output: >
    Now generate the distribution plot for the gamma parameter.
  CorrectAnswer: ggplot(mcmc_output_noburnin, aes(x=gamma)) + geom_histogram(aes(y=..density..)) + geom_density(aes(y=..density..))
  AnswerTests: omnitest(correctExpr='ggplot(mcmc_output_noburnin, aes(x=gamma)) + geom_histogram(aes(y=..density..)) + geom_density(aes(y=..density..))')
  Hint: Copy and paste the expression from the question into the command line

- Class: cmd_question
  Output: "The parameter we are most interested in is R0. To calculate this, let's first create a new variable called R0.\nType mcmc_output_noburnin <- mutate(mcmc_output_noburnin, R0 = beta*760/gamma) in the command line."
  CorrectAnswer: mcmc_output_noburnin <- mutate(mcmc_output_noburnin, R0 = beta*760/gamma)
  AnswerTests: omnitest(correctExpr='mcmc_output_noburnin <- mutate(mcmc_output_noburnin, R0 = beta*760/gamma)')
  Hint: Copy and paste the expression from the question into the command line

- Class: cmd_question
  Output: >
    Now to visualize the posterior distribution for R0.
  CorrectAnswer: ggplot(mcmc_output_noburnin, aes(x=R0)) + geom_histogram(aes(y=..density..)) + geom_density(aes(y=..density..))
  AnswerTests: omnitest(correctExpr='ggplot(mcmc_output_noburnin, aes(x=R0)) + geom_histogram(aes(y=..density..)) + geom_density(aes(y=..density..))')
  Hint: Copy and paste the expression from the question into the command line

- Class: cmd_question
  Output: "We can summarize our findings in terms of the mean and 95\% credible intervals.\nType mean(mcmc_output_noburnin$R0) in the command line."
  CorrectAnswer: mean(mcmc_output_noburnin$R0)
  AnswerTests: omnitest(correctExpr='mean(mcmc_output_noburnin$R0)')
  Hint: Copy and paste the expression from the question into the command line

- Class: exact_question
  Output: What is the mean R0 value estimated from the data (round to 2 decimal places)?
  CorrectAnswer: 3.61
  AnswerTests: omnitest(correctVal = 3.61)
  Hint: Remember to round to 2 decimal places.

- Class: cmd_question
  Output: "There are several ways to quantify the uncertainty. Let us first calculate the standard deviation. \nType sd(mcmc_output_noburnin$R0) in the command line."
  CorrectAnswer: sd(mcmc_output_noburnin$R0)
  AnswerTests: omnitest(correctExpr='sd(mcmc_output_noburnin$R0)')
  Hint: Copy and paste the expression from the question into the command line

- Class: exact_question
  Output: What is the standard deviation of R0 estimates (round to 4 decimal places)?
  CorrectAnswer: 0.0857
  AnswerTests: omnitest(correctVal = 0.0857)
  Hint: Remember to round to 4 decimal places.

- Class: cmd_question
  Output: "We can use the standard deviation to calculate the credible intervals assuming that the posterior distribution follows a Gaussian. Type \nwith(mcmc_output_noburnin, mean(R0)+qnorm(c(0.025, 0.975))*sd(R0)/sqrt(length(R0))) \nin the commmand line."
  CorrectAnswer: with(mcmc_output_noburnin, mean(R0)+qnorm(c(0.025, 0.975))*sd(R0)/sqrt(length(R0)))
  AnswerTests: omnitest(correctExpr='with(mcmc_output_noburnin, mean(R0)+qnorm(c(0.025, 0.975))*sd(R0)/sqrt(length(R0)))')
  Hint: Copy and paste the expression from the question into the command line

- Class: exact_question
  Output: What is upper bound of the credible interval (round to 4 decimal places) assuming a Gaussian distribution?
  CorrectAnswer: 3.6145
  AnswerTests: omnitest(correctVal = 3.6145)
  Hint: Remember to round to 4 decimal places.

- Class: cmd_question
  Output: "An alternative way is by calculating the 2.5 and 97.5\% sample quantiles, making no prior assumptions about the statistical distribution of the posterior. Type \nquantile(mcmc_output_noburnin$R0, c(0.025, 0.975)) \nin the command line."
  CorrectAnswer: quantile(mcmc_output_noburnin$R0, c(0.025, 0.975))
  AnswerTests: omnitest(correctExpr='quantile(mcmc_output_noburnin$R0, c(0.025, 0.975))')
  Hint: Copy and paste the expression from the question into the command line

- Class: exact_question
  Output: What is the upper bound of the credible interval (round to 4 decimal places) calculated using the sample quantiles?
  CorrectAnswer: 3.7876
  AnswerTests: omnitest(correctVal = 3.7876)
  Hint: Remember to round to 4 decimal places.

- Class: cmd_question
  Output: "Finally, we can calculate the credible interval using the highest probability density (HPD) method. Type \nHPDinterval(mcmc(mcmc_output_noburnin$R0)) \nin the command line.""
  CorrectAnswer: HPDinterval(mcmc(mcmc_output_noburnin$R0))
  AnswerTests: omnitest(correctExpr='HPDinterval(mcmc(mcmc_output_noburnin$R0))')
  Hint: Copy and paste the expression from the question into the command line

- Class: exact_question
  Output: What is the upper bound of the credible interval (round to 4 decimal places) calculated using HPD?
  CorrectAnswer: 3.7918
  AnswerTests: omnitest(correctVal = 3.7918)
  Hint: Remember to round to 4 decimal places.
